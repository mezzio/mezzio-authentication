{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mezzio Authentication Middleware üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º –ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\" üá∫üá∏ To Citizens of Russia We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" mezzio-authentication provides middleware for Mezzio and PSR-7 applications for the purpose of authenticating HTTP requests using consumer- or third-party-provided adapters. Installation You can install the mezzio-authentication library with composer: $ composer require mezzio/mezzio-authentication Documentation Browse the documentation online at https://docs.mezzio.dev/mezzio-authentication/ .","title":"Home"},{"location":"#mezzio-authentication-middleware","text":"","title":"Mezzio Authentication Middleware"},{"location":"#_1","text":"–ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\"","title":"üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º"},{"location":"#to-citizens-of-russia","text":"We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" mezzio-authentication provides middleware for Mezzio and PSR-7 applications for the purpose of authenticating HTTP requests using consumer- or third-party-provided adapters.","title":"üá∫üá∏ To Citizens of Russia"},{"location":"#installation","text":"You can install the mezzio-authentication library with composer: $ composer require mezzio/mezzio-authentication","title":"Installation"},{"location":"#documentation","text":"Browse the documentation online at https://docs.mezzio.dev/mezzio-authentication/ .","title":"Documentation"},{"location":"v1/auth-adapter/","text":"Authentication Adapters The authentication adapters for mezzio-authentication implement the interface Mezzio\\Authentication\\AuthenticationInterface : namespace Mezzio\\Authentication; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Message\\ResponseInterface; interface AuthenticationInterface { /** * Authenticate the PSR-7 request and return a valid user, * or null if not authenticated * * @param ServerRequestInterface $request * @return UserInterface|null */ public function authenticate(ServerRequestInterface $request): ?UserInterface; /** * Generate the unauthorized response * * @param ServerRequestInterface $request * @return ResponseInterface */ public function unauthorizedResponse(ServerRequestInterface $request): ResponseInterface; } This interface contains two method: authenticate() to check if a PSR-7 request contains a valid credential, and unauthorizedResponse() to generate and return an unauthorized response. We provide 4 authentication adapters: mezzio-authentication-basic , for Basic Access Authentication , supporting only bcrypt as the password hashing algorithm to ensure best security. mezzio-authentication-session , for authenticating username/password credential pairs and persisting them between requests via PHP sessions. mezzio-authentication-laminasauthentication , supporting the laminas-authentication component. mezzio-authentication-oauth2 , supporting the OAuth2 authentication framework via the league/oauth2-server package.","title":"Authentication Adapters"},{"location":"v1/auth-adapter/#authentication-adapters","text":"The authentication adapters for mezzio-authentication implement the interface Mezzio\\Authentication\\AuthenticationInterface : namespace Mezzio\\Authentication; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Message\\ResponseInterface; interface AuthenticationInterface { /** * Authenticate the PSR-7 request and return a valid user, * or null if not authenticated * * @param ServerRequestInterface $request * @return UserInterface|null */ public function authenticate(ServerRequestInterface $request): ?UserInterface; /** * Generate the unauthorized response * * @param ServerRequestInterface $request * @return ResponseInterface */ public function unauthorizedResponse(ServerRequestInterface $request): ResponseInterface; } This interface contains two method: authenticate() to check if a PSR-7 request contains a valid credential, and unauthorizedResponse() to generate and return an unauthorized response. We provide 4 authentication adapters: mezzio-authentication-basic , for Basic Access Authentication , supporting only bcrypt as the password hashing algorithm to ensure best security. mezzio-authentication-session , for authenticating username/password credential pairs and persisting them between requests via PHP sessions. mezzio-authentication-laminasauthentication , supporting the laminas-authentication component. mezzio-authentication-oauth2 , supporting the OAuth2 authentication framework via the league/oauth2-server package.","title":"Authentication Adapters"},{"location":"v1/intro/","text":"Introduction This component provides authentication abstraction using a middleware approach for PSR-7 and PSR-15 applications. Authentication is performed using the AuthenticationMiddleware class. This middleware consumes an AuthenticationInterface adapter to check if a PSR-7 request is authenticated or not. If authenticated, the middleware executes the next middleware in the application, passing a UserInterface object via a request attribute. If the request is not authenticated, the middleware returns a 401 Unauthorized response based on the authentication adapter provided. The Mezzio\\Authentication\\UserInterface is defined as follows: namespace Mezzio\\Authentication; interface UserInterface { /** * Get the unique user identity (id, username, email address, etc.). */ public function getIdentity() : string; /** * Get all user roles. * * @return string[] */ public function getRoles() : array; /** * Get the detail named $name if present; return $default otherwise. */ public function getDetail(string $name, $default = null); /** * Get all additional user details, if any. */ public function getDetails() : array; } The UserInterface attribute in the PSR-7 request can be used for checking if a user has been authenticated or not, e.g. it can be used to verify the authorization level of a user (for this scope, it is consumed by mezzio-authorization ). For example: // Retrieve the UserInterface object from the request. $user = $request-&gt;getAttribute(UserInterface::class); // Retrieve the user's identity. $user-&gt;getIdentity(); // Retrieve the user's roles (if any). $user-&gt;getRoles(); // Retrieve the user's other details (if any). $user-&gt;getDetails(); Default User Class We provide a default implementation of UserInterface via the class Mezzio\\Authentication\\DefaultUser . The class is final and immutable, in order to prevent runtime changes. Repositories will fetch user information based on the identity, including any associated roles, and optionally any additional details (full name, email, profile information, etc.). Often, user data and the objects representing them are unique to the application. As such, the default repository implementations we provide allow you to inject a factory for producing the user. This factory should be a PHP callable with the following signature: function (string $identity, array $roles = [], array $details = []) : UserInterface In order to notify the package to use your custom factory, you will need to create a service factory that returns it, and map it to the Mezzio\\Authentication\\UserInterface service. We provide a service factory named Mezzio\\Authentication\\DefaultUserFactory that returns a user factory that produces a DefaultUser instance from the arguments provided. This is mapped as follows in the service configuration: use Mezzio\\Authentication\\DefaultUserFactory; use Mezzio\\Authentication\\UserInterface; return [ // ... 'dependencies' =&gt; [ 'factories' =&gt; [ // ... // Change the DefaultUserFactory::class with your custom service // factory that produces a user factory: UserInterface::class =&gt; DefaultUserFactory::class ] ] ]; Usage in the Route The AuthenticationMiddleware can be used to authenticate a route. You just need to add the class name of the middleware in the pipeline of a route. As an example: $app-&gt;get('/admin/dashboard', [ Mezzio\\Authentication\\AuthenticationMiddleware::class, Admin\\Action\\Dashboard::class ], 'admin.dashboard'); In this example, the AuthenticationMiddleware is executed as first middleware of the route admin.dashboard . If the user is authenticated, the application executes the Dashboard action; otherwise it returns a 401 Unauthorized response. Choosing an Authentication Adapter You can choose an authentication adapter and a user repository through the service container configuration. You need to specify the service for authentication using the name Mezzio\\Authentication\\AuthenticationInterface and the user registry using the service name Mezzio\\Authentication\\UserRepositoryInterface::class . For instance, using laminas-servicemanager you can easily configure these two services using aliases . Below is an example of configuration using the HTTP Basic Access Authentication adapter and the htpasswd file as the user repository. use Mezzio\\Authentication\\AuthenticationInterface; use Mezzio\\Authentication\\Basic; use Mezzio\\Authentication\\UserRepository; use Mezzio\\Authentication\\UserRepositoryInterface; return [ // ... 'dependencies' =&gt; [ // ... 'aliases' =&gt; [ // ... AuthenticationInterface::class =&gt; Basic\\BasicAccess::class, UserRepositoryInterface::class =&gt; UserRepository\\Htpasswd::class ] ] ];","title":"Introduction"},{"location":"v1/intro/#introduction","text":"This component provides authentication abstraction using a middleware approach for PSR-7 and PSR-15 applications. Authentication is performed using the AuthenticationMiddleware class. This middleware consumes an AuthenticationInterface adapter to check if a PSR-7 request is authenticated or not. If authenticated, the middleware executes the next middleware in the application, passing a UserInterface object via a request attribute. If the request is not authenticated, the middleware returns a 401 Unauthorized response based on the authentication adapter provided. The Mezzio\\Authentication\\UserInterface is defined as follows: namespace Mezzio\\Authentication; interface UserInterface { /** * Get the unique user identity (id, username, email address, etc.). */ public function getIdentity() : string; /** * Get all user roles. * * @return string[] */ public function getRoles() : array; /** * Get the detail named $name if present; return $default otherwise. */ public function getDetail(string $name, $default = null); /** * Get all additional user details, if any. */ public function getDetails() : array; } The UserInterface attribute in the PSR-7 request can be used for checking if a user has been authenticated or not, e.g. it can be used to verify the authorization level of a user (for this scope, it is consumed by mezzio-authorization ). For example: // Retrieve the UserInterface object from the request. $user = $request-&gt;getAttribute(UserInterface::class); // Retrieve the user's identity. $user-&gt;getIdentity(); // Retrieve the user's roles (if any). $user-&gt;getRoles(); // Retrieve the user's other details (if any). $user-&gt;getDetails();","title":"Introduction"},{"location":"v1/intro/#default-user-class","text":"We provide a default implementation of UserInterface via the class Mezzio\\Authentication\\DefaultUser . The class is final and immutable, in order to prevent runtime changes. Repositories will fetch user information based on the identity, including any associated roles, and optionally any additional details (full name, email, profile information, etc.). Often, user data and the objects representing them are unique to the application. As such, the default repository implementations we provide allow you to inject a factory for producing the user. This factory should be a PHP callable with the following signature: function (string $identity, array $roles = [], array $details = []) : UserInterface In order to notify the package to use your custom factory, you will need to create a service factory that returns it, and map it to the Mezzio\\Authentication\\UserInterface service. We provide a service factory named Mezzio\\Authentication\\DefaultUserFactory that returns a user factory that produces a DefaultUser instance from the arguments provided. This is mapped as follows in the service configuration: use Mezzio\\Authentication\\DefaultUserFactory; use Mezzio\\Authentication\\UserInterface; return [ // ... 'dependencies' =&gt; [ 'factories' =&gt; [ // ... // Change the DefaultUserFactory::class with your custom service // factory that produces a user factory: UserInterface::class =&gt; DefaultUserFactory::class ] ] ];","title":"Default User Class"},{"location":"v1/intro/#usage-in-the-route","text":"The AuthenticationMiddleware can be used to authenticate a route. You just need to add the class name of the middleware in the pipeline of a route. As an example: $app-&gt;get('/admin/dashboard', [ Mezzio\\Authentication\\AuthenticationMiddleware::class, Admin\\Action\\Dashboard::class ], 'admin.dashboard'); In this example, the AuthenticationMiddleware is executed as first middleware of the route admin.dashboard . If the user is authenticated, the application executes the Dashboard action; otherwise it returns a 401 Unauthorized response.","title":"Usage in the Route"},{"location":"v1/intro/#choosing-an-authentication-adapter","text":"You can choose an authentication adapter and a user repository through the service container configuration. You need to specify the service for authentication using the name Mezzio\\Authentication\\AuthenticationInterface and the user registry using the service name Mezzio\\Authentication\\UserRepositoryInterface::class . For instance, using laminas-servicemanager you can easily configure these two services using aliases . Below is an example of configuration using the HTTP Basic Access Authentication adapter and the htpasswd file as the user repository. use Mezzio\\Authentication\\AuthenticationInterface; use Mezzio\\Authentication\\Basic; use Mezzio\\Authentication\\UserRepository; use Mezzio\\Authentication\\UserRepositoryInterface; return [ // ... 'dependencies' =&gt; [ // ... 'aliases' =&gt; [ // ... AuthenticationInterface::class =&gt; Basic\\BasicAccess::class, UserRepositoryInterface::class =&gt; UserRepository\\Htpasswd::class ] ] ];","title":"Choosing an Authentication Adapter"},{"location":"v1/user-repository/","text":"User Repository An authentication adapter can pull user information from a variety of repositories: an htpasswd file a database a cache mezzio-authentication provides an interface, Mezzio\\Authentication\\UserRepositoryInterface , to access this user storage: namespace Mezzio\\Authentication; interface UserRepositoryInterface { /** * Authenticate the credential (username) using a password * or using only the credential string (e.g. token based credential) * It returns the authenticated user or null. * * @param string $credential can be also a token */ public function authenticate(string $credential, string $password = null) : ?UserInterface; } It contains only the authenticate() function, to authenticate the user's credential. If authenticated, the result will be a UserInterface instance; otherwise, a null value is returned. Configure the User Repository In order to use a user repository adapter, we need to configure it. For instance, to consume an htpasswd file, we need to configure the path to the file. Such configuration is provided in the authentication hierarchy provided to your PSR-11 container. We demonstrate examples of such configuration below. Using Mezzio , this configuration can be stored in a file under the /config/autoload/ folder. We suggest to use a .local.php suffix ‚Äî e.g. /config/autoload/auth.local.php ‚Äî as local configuration is not stored in the version control system. You can also provide this configuration using a ConfigProvider.php class. Read this blog post for more information on config providers. htpasswd Configuration When using the htpasswd user repository implementation, you need only configure the path to the htpasswd file and a realm . The htpasswd file must use bcrypt hash algorithm: return [ 'authentication' =&gt; [ 'realm' =&gt; 'insert realm value', 'htpasswd' =&gt; 'insert the path to htpasswd file', ], ]; PDO Configuration When using the PDO user repository adapter, you will need to provide PDO connection parameters, as well as information on the table, field names, and a SQL statement for retrieving user roles: return [ 'authentication' =&gt; [ 'pdo' =&gt; [ 'dsn' =&gt; '', 'username' =&gt; '', 'password' =&gt; '', 'table' =&gt; 'user table name', 'field' =&gt; [ 'identity' =&gt; 'identity field name', 'password' =&gt; 'password field name', ], 'sql_get_roles' =&gt; 'SQL to retrieve roles with :identity parameter', 'sql_get_details' =&gt; 'SQL to retrieve user details by :identity', ], ], ]; The required parameters are dsn , table , and field . The dsn value is the DSN connection string to be used to connect to the database. For instance, using a SQLite database, a typical value is sqlite:/path/to/file . The username and password parameters are optional parameters used to connect to the database. Depending on the database, these parameters may not be required; e.g. SQLite does not require them. The table value is the name of the table containing the user credentials. The field parameter contains the field name of the identity of the user and the user password. The identity of the user can be a username, an email, etc. The sql_get_roles setting is an optional parameter that contains the SQL query for retrieving the user roles. The identity value must be specified using the placeholder :identity . For instance, if a role is stored in a user table, a typical query might look like the following: SELECT role FROM user WHERE username = :identity The sql_get_details parameter is similar to sql_get_roles : it specifies the SQL query for retrieving the user's additional details, if any. For instance, if a user has an email field this can be returned as additional detail using the following query: SELECT email FROM user WHERE username = :identity PDO Service Name Since 1.1.0 As an alternative, you can provide a service name instead of PDO connection parameters. In such a case, you can substitute the key service for the dsn configuration key: return [ 'authentication' =&gt; [ 'pdo' =&gt; [ 'service' =&gt; \\PDO::class, // \"service\" instead of \"dsn\" 'table' =&gt; 'user table name', 'field' =&gt; [ 'identity' =&gt; 'identity field name', 'password' =&gt; 'password field name', ], 'sql_get_roles' =&gt; 'SQL to retrieve roles with :identity parameter', 'sql_get_details' =&gt; 'SQL to retrieve user details by :identity', ], ], ]; The parameters table and field still remain required, and one or the other of dsn or service MUST be present. When specifying the service key, the value MUST evaluate to an existing service that resolves to a PDO instance.","title":"User Repository"},{"location":"v1/user-repository/#user-repository","text":"An authentication adapter can pull user information from a variety of repositories: an htpasswd file a database a cache mezzio-authentication provides an interface, Mezzio\\Authentication\\UserRepositoryInterface , to access this user storage: namespace Mezzio\\Authentication; interface UserRepositoryInterface { /** * Authenticate the credential (username) using a password * or using only the credential string (e.g. token based credential) * It returns the authenticated user or null. * * @param string $credential can be also a token */ public function authenticate(string $credential, string $password = null) : ?UserInterface; } It contains only the authenticate() function, to authenticate the user's credential. If authenticated, the result will be a UserInterface instance; otherwise, a null value is returned.","title":"User Repository"},{"location":"v1/user-repository/#configure-the-user-repository","text":"In order to use a user repository adapter, we need to configure it. For instance, to consume an htpasswd file, we need to configure the path to the file. Such configuration is provided in the authentication hierarchy provided to your PSR-11 container. We demonstrate examples of such configuration below. Using Mezzio , this configuration can be stored in a file under the /config/autoload/ folder. We suggest to use a .local.php suffix ‚Äî e.g. /config/autoload/auth.local.php ‚Äî as local configuration is not stored in the version control system. You can also provide this configuration using a ConfigProvider.php class. Read this blog post for more information on config providers.","title":"Configure the User Repository"},{"location":"v1/user-repository/#htpasswd-configuration","text":"When using the htpasswd user repository implementation, you need only configure the path to the htpasswd file and a realm . The htpasswd file must use bcrypt hash algorithm: return [ 'authentication' =&gt; [ 'realm' =&gt; 'insert realm value', 'htpasswd' =&gt; 'insert the path to htpasswd file', ], ];","title":"htpasswd Configuration"},{"location":"v1/user-repository/#pdo-configuration","text":"When using the PDO user repository adapter, you will need to provide PDO connection parameters, as well as information on the table, field names, and a SQL statement for retrieving user roles: return [ 'authentication' =&gt; [ 'pdo' =&gt; [ 'dsn' =&gt; '', 'username' =&gt; '', 'password' =&gt; '', 'table' =&gt; 'user table name', 'field' =&gt; [ 'identity' =&gt; 'identity field name', 'password' =&gt; 'password field name', ], 'sql_get_roles' =&gt; 'SQL to retrieve roles with :identity parameter', 'sql_get_details' =&gt; 'SQL to retrieve user details by :identity', ], ], ]; The required parameters are dsn , table , and field . The dsn value is the DSN connection string to be used to connect to the database. For instance, using a SQLite database, a typical value is sqlite:/path/to/file . The username and password parameters are optional parameters used to connect to the database. Depending on the database, these parameters may not be required; e.g. SQLite does not require them. The table value is the name of the table containing the user credentials. The field parameter contains the field name of the identity of the user and the user password. The identity of the user can be a username, an email, etc. The sql_get_roles setting is an optional parameter that contains the SQL query for retrieving the user roles. The identity value must be specified using the placeholder :identity . For instance, if a role is stored in a user table, a typical query might look like the following: SELECT role FROM user WHERE username = :identity The sql_get_details parameter is similar to sql_get_roles : it specifies the SQL query for retrieving the user's additional details, if any. For instance, if a user has an email field this can be returned as additional detail using the following query: SELECT email FROM user WHERE username = :identity","title":"PDO Configuration"}]}